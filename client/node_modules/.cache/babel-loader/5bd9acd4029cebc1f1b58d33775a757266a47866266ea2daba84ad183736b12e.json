{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\erict\\\\Documents\\\\GitHub\\\\17530_Apple\\\\client\\\\src\\\\components\\\\CheckoutPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport './CheckoutPage.css';\nimport { Link, useParams } from 'react-router-dom';\nimport ProjectDetails from './ProjectDetails';\n\n// when page is visited, backend grabs relevant dictionaries\n// from mongo and gives them to client to be displayed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CheckoutPage() {\n  _s();\n  const {\n    username\n  } = useParams();\n  const [projList, setProjList] = useState({});\n  //\n  const [projectIdentifer, setProjectIdentifer] = useState(\"\");\n  const [projectDescription, setProjectDescription] = useState(\"\");\n  const [projectName, setProjectName] = useState(\"\"); // Holds the project name input for join\n  const [projectNameCreate, setProjectNameCreate] = useState(\"\"); //Holds project name for creating\n  const [message, setMessage] = useState(\"\");\n  const createProject = async () => {\n    try {\n      if (projectIdentifer == \"\" || projectNameCreate == \"\") {\n        setMessage(\"Project identifier and name cannot be empty\");\n        return;\n      }\n      const response = await fetch('/create_project', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          project_name: projectNameCreate,\n          username: username,\n          description: projectDescription,\n          identifier: projectIdentifer\n        })\n      });\n      const result = await response.json();\n      setMessage(result.success || result.error);\n      setProjectName(\"\");\n    } catch (error) {\n      setMessage(\"Error creating project\");\n      setProjectName(\"\");\n    }\n  };\n  const joinProject = async () => {\n    try {\n      const response = await fetch('/project/addUser', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'username': username,\n          'project': projectName\n        })\n      });\n      const result = await response.json();\n      if (result == 2) {\n        setMessage(\"Project does not exist\");\n      } else if (result == 1) {\n        setMessage(\"User already in project\");\n      } else {\n        setMessage(\"Success\");\n      }\n      setProjectName(\"\");\n    } catch (error) {\n      setMessage(\"Error joining project\");\n      setProjectName(\"\");\n    }\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch('/home/getAllProjects', {\n        method: 'Post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          'username': username\n        })\n      });\n      const jsonData = await response.json();\n      setProjList(jsonData);\n    };\n    fetchData();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Spacer text, do not delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Welcome, \", username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Project Name\",\n        value: projectNameCreate,\n        onChange: e => setProjectNameCreate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createProject,\n        children: \"Create New Project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Project ID\",\n        value: projectIdentifer,\n        onChange: e => setProjectIdentifer(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Project Name\",\n        value: projectName,\n        onChange: e => setProjectName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Project Description\",\n        value: projectDescription,\n        onChange: e => setProjectDescription(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: joinProject,\n        children: \"Join Project\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Projects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"projects-container\",\n        children: Object.values(projList).map(project => /*#__PURE__*/_jsxDEV(ProjectDetails, {\n          name: project.name,\n          hardware: project.hardware,\n          members: project.members,\n          description: project.description,\n          identifier: project.identifier,\n          changeMessage: msg => setMessage(msg)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(CheckoutPage, \"iWNawhlPSzmoNhwngvMjn4jMJHQ=\", false, function () {\n  return [useParams];\n});\n_c = CheckoutPage;\nexport default CheckoutPage;\nvar _c;\n$RefreshReg$(_c, \"CheckoutPage\");","map":{"version":3,"names":["React","useState","useEffect","Header","Link","useParams","ProjectDetails","jsxDEV","_jsxDEV","CheckoutPage","_s","username","projList","setProjList","projectIdentifer","setProjectIdentifer","projectDescription","setProjectDescription","projectName","setProjectName","projectNameCreate","setProjectNameCreate","message","setMessage","createProject","response","fetch","method","headers","body","JSON","stringify","project_name","description","identifier","result","json","success","error","joinProject","fetchData","jsonData","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","className","Object","values","map","project","name","hardware","members","changeMessage","msg","_c","$RefreshReg$"],"sources":["C:/Users/erict/Documents/GitHub/17530_Apple/client/src/components/CheckoutPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Header from './Header';\r\nimport './CheckoutPage.css'\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport ProjectDetails from './ProjectDetails';\r\n\r\n// when page is visited, backend grabs relevant dictionaries\r\n// from mongo and gives them to client to be displayed\r\nfunction CheckoutPage() {\r\n  const {username} = useParams();\r\n  const [projList, setProjList] = useState({});\r\n  //\r\n  const [projectIdentifer, setProjectIdentifer] = useState(\"\");\r\n  const [projectDescription, setProjectDescription] = useState(\"\");\r\n  const [projectName, setProjectName] = useState(\"\");  // Holds the project name input for join\r\n  const [projectNameCreate, setProjectNameCreate] = useState(\"\"); //Holds project name for creating\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const createProject = async () => {\r\n    try {\r\n      if (projectIdentifer == \"\" || projectNameCreate == \"\") {\r\n        setMessage(\"Project identifier and name cannot be empty\")\r\n        return\r\n      }\r\n      const response = await fetch('/create_project', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ project_name: projectNameCreate, username: username, description: projectDescription, identifier: projectIdentifer })\r\n      });\r\n      const result = await response.json();\r\n      setMessage(result.success || result.error);\r\n      setProjectName(\"\")\r\n    } catch (error) {\r\n      setMessage(\"Error creating project\");\r\n      setProjectName(\"\")\r\n    }\r\n  };\r\n\r\n  const joinProject = async () => {\r\n    try {\r\n      const response = await fetch('/project/addUser', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({'username': username, 'project': projectName})\r\n      });\r\n      const result = await response.json();\r\n      if (result == 2) {setMessage(\"Project does not exist\")}\r\n      else if (result == 1) {setMessage(\"User already in project\")}\r\n      else {setMessage(\"Success\")}\r\n      setProjectName(\"\")\r\n    } catch (error) {\r\n      setMessage(\"Error joining project\");\r\n      setProjectName(\"\")\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const response = await fetch('/home/getAllProjects', {method:'Post',\r\n      headers:{'Content-Type': 'application/json'},\r\n      body: JSON.stringify({'username': username})});\r\n      const jsonData = await response.json();\r\n      setProjList(jsonData)\r\n    }\r\n    fetchData();\r\n  });\r\n  \r\n  return (\r\n    <div style={{ textAlign: \"center\" }}>\r\n      <Header />\r\n      <h1>Spacer text, do not delete</h1>\r\n      <h1>Welcome, {username}</h1>\r\n      {/* Project Creation Inputs and Button */}\r\n      <div>\r\n        <input type=\"text\" placeholder=\"Project Name\" value={projectNameCreate} onChange={(e) => setProjectNameCreate(e.target.value)}/>\r\n        <button onClick={createProject}>Create New Project</button>\r\n      </div>\r\n\r\n      {/* Project Join Inputs and Button */}\r\n      <div>\r\n        <input type=\"text\" placeholder=\"Project ID\" value={projectIdentifer} onChange={(e) => setProjectIdentifer(e.target.value)}/>\r\n        <input type=\"text\" placeholder=\"Project Name\" value={projectName} onChange={(e) => setProjectName(e.target.value)}/>\r\n        <input type=\"text\" placeholder=\"Project Description\" value={projectDescription} onChange={(e) => setProjectDescription(e.target.value)}/>\r\n        <button onClick={joinProject}>Join Project</button>\r\n      </div>\r\n      <p>{message}</p> {/* Display success or error message */}\r\n      \r\n      {/* Project List */}\r\n      <div>\r\n        <h1>Projects</h1>\r\n        <div className=\"projects-container\">\r\n          {Object.values(projList).map((project) => (\r\n            <ProjectDetails\r\n              name={project.name}\r\n              hardware={project.hardware}\r\n              members={project.members}\r\n              description={project.description}\r\n              identifier={project.identifier}\r\n              changeMessage={(msg) => setMessage(msg)}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CheckoutPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}